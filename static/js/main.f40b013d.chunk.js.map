{"version":3,"sources":["assets/Logo.png","assets/lilly/lilly.jpg","components/dogFact.js","components/dogGif.js","components/navBar.js","components/dogHist.js","components/noFacts.js","components/lilly.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DogFact","props","class","classs","src","dogImg","breed","height","weight","temper","job","DogGif","dogGif","Navbar","href","require","width","alt","DogHist","media","controls","type","NoDogFact","Lilly","App","state","fact","imgData","isLoaded","fetch","then","res","json","data","setState","url","catch","console","log","res2","breeds","metric","dogOut","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f40b013d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.f89a5e06.png\";","module.exports = __webpack_public_path__ + \"static/media/lilly.5b4c484b.jpg\";","// src/components/objects.js\nimport React from 'react'\n\nconst DogFact = (props) => {\n\nreturn (\n<div>\n      <div class=\"opacity-5 shadow-lg\">\n        <div class=\"card-body\">\n          <h4 classs=\"card-title\">Facts about Dogs</h4>\n          <h6 class=\"card-subtitle mb-2 text-muted\">for Isabelle</h6>\n          <img class=\"img-fluid rounded mx-auto d-block\" src= {props.dogImg} />\n          <div>\n            <p class=\"card-text mx-auto mt-3\"><b>This dog is a: </b>{props.breed}.</p>\n            <p class=\"card-text mx-auto mt-3\"><b>She is between: </b>{props.height} cm in height, and {props.weight} kg in weight.</p>\n            <p class=\"card-text mx-auto mt-3\"><b>She is: </b>{props.temper}.</p>\n            <p class=\"card-text mx-auto mt-3\"><b>Her job is: </b>{props.job}.</p>\n\n\n          </div>\n        </div>\n      </div>\n  </div>\n  )\n};\nexport default DogFact\n\n\n/*\n\ncomponentDidMount(){\n\n  //fist call gets an image from api1\nfetch('https://api.thedogapi.com/v1/images/search?mime_types=gif&&api_key=1dd6d46e-d0e8-4b4c-a651-a8cc707742f2') // use a header for the api keey value pair\n  .then(res => res.json())\n  .then((data) => {\n    this.setState({ imgData: data })\n    this.setState({ dogGif: this.state.imgData[0].url }) // Extract out dog imageUrl and pass as prop to dog componenbt\n    //console.log('Here is the dog image: ' + this.state.dog);\n  })\n  .catch(console.log)\n// second call gets an image from api 2\nfetch('https://api.thedogapi.com/v1/images/search?mime_types=png&&api_key=1dd6d46e-d0e8-4b4c-a651-a8cc707742f2')\n  .then(res2 => res2.json())\n  .then((data) => {\n    this.setState({ fact: data })\n    console.log('this.state.fact: ')\n    console.log(this.state.fact)\n\n    console.log('This dog is a ' + this.state.fact[0].breeds[0][\"name\"])\n\n    console.log('She is between: ' + this.state.fact[0].breeds[0][\"height\"].metric + 'cm in height, and ' + this.state.fact[0].breeds[0][\"weight\"].metric + 'kg in weight.')\n\n    console.log('She is ' + this.state.fact[0].breeds[0][\"temperament\"])\n  //  console.log(this.state.fact[0].breeds[0][\"temperament\"])\n\n    console.log('Her Job is ' + this.state.fact[0].breeds[0][\"bred_for\"])\n\n\n\n\n   })\n   .catch(console.log)\n}\n\n*/\n","// src/components/objects.js\nimport React from 'react'\n\nconst DogGif = (props) => {\n\nreturn (\n<div>\n      <div class=\"opacity-5 shadow-lg\">\n        <div class=\"card-body\">\n        <h5 classs=\"card-title\">Information</h5>\n        <h6 class=\"card-subtitle mb-3 text-muted\">What is this website?</h6>\n          <img class=\"img-fluid rounded mx-auto d-block\" src= {props.dogGif} />\n          <div>\n            <p class=\"card-text mx-auto mt-3\">Welcome to Isabelle's Dog Facts.</p>\n            <p>This is a place where Isabelle Ryan can visit once a day to see some dogs, learn some new facts about dogs, and watch a funny dog video.</p>\n            <p>Isabelle can also learn facts about her own dog Lilly here too.</p>\n            <p>This website is a birthday present to Isabelle Ryan for her 5th birthday from her uncle Stephen</p>\n            <p>She can visit this website any tinme that her Mom and Dad allow her.</p>\n            </div>\n          <div>\n          </div>\n        </div>\n      </div>\n  </div>\n  )\n};\nexport default DogGif\n","import React from 'react'\n\nconst Navbar = ( props ) => {\n\nreturn (\n\n  <nav class=\"opacity-5 navbar mb-4 navbar-light shadow\">\n    <a class=\"navbar-brand\" href=\"#\"><img class=\"img-fluid rounded mx-auto d-block\" src= {require('../assets/Logo.png')} width = '500' alt =\"Dog Facts\"/><h5 class =\"text-wrap\">Come back every day for some new facts about dogs!</h5></a>\n  </nav>\n  )\n};\n\nexport default Navbar\n//  <center><h1>NASA:  Picture of the Day</h1></center>\n","// src/components/objects.js\nimport React from 'react'\n\n// objects is the parameter passed to a fubction called Objects (defined by const).\n// What the function does is everything after the fat arrow\n\nconst DogHist = ({ media }) => {\n//  console.log({objects.near_earth_objects[1]});\nreturn (\n<div>\n  {\n    <div class=\"opacity-5 mt-3 shadow-lg\">\n        <div class=\"card-body\">\n          <h5 classs=\"card-title\">A Brief History of Dogs</h5>\n          <h6 class=\"card-subtitle mb-2 text-muted\">National Geographic</h6>\n          <div class=\"embed-responsive embed-responsive-16by9 mx-auto d-block\">\n\n          <video controls>\n          <source src='https://www.dropbox.com/s/nl9h8noxb9fp5yq/briefCut.mp4?raw=1' type=\"video/mp4\" />\n          <source src='https://www.dropbox.com/s/0z27etsdcdb6nfp/briefCut.ogv?raw=1' type=\"video/ogg\" />\n          </video>\n\n          </div>\n          <div>\n          </div>\n      </div>\n    </div>\n  }\n</div>\n  )\n};\n\n\nexport default DogHist\n\n\n// Add this in later problem with file:           <source src={require('https://www.dropbox.com/s/0z27etsdcdb6nfp/briefCut.ogv?raw=1')} type=\"video/ogg\" />\n\n/*\n\n <iframe width=\"560\" height=\"315\"\n src=\"https://www.youtube.com/embed/WR16wyrADo8\"\n frameborder=\"0\"\n allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n*/\n","//noFacts.js\n\nimport React from 'react'\n\nconst NoDogFact = (props) => {\n\nreturn (\n<div>\n\n      <div class=\"opacity-5 shadow-lg\">\n        <div class=\"card-body\">\n          <h5 classs=\"card-title\">Facts about Dogs</h5>\n          <h6 class=\"card-subtitle mb-2 text-muted\">for Isabelle</h6>\n          <img class=\"img-fluid rounded mx-auto d-block\" src= {props.dogImg} />\n          <div>\n            <p class=\"card-text mx-auto mt-3\">This dog is a mystery!</p>\n            <p class=\"card-text mx-auto mt-3\">We have no facts about this magnificent beast...</p>\n\n          </div>\n        </div>\n      </div>\n  </div>\n  )\n};\nexport default NoDogFact\n","// src/components/objects.js\nimport React from 'react'\n\nconst Lilly = (props) => {\n\nreturn(\n<div class=\"opacity-5 mt-3 shadow-lg\">\n  <div class=\"card-body\">\n  <h5 classs=\"card-title\">Lilly</h5>\n  <h6 class=\"card-subtitle mb-2 text-muted\">Facts about Lilly</h6>\n  <img class=\"img-fluid rounded mx-auto d-block\" src= {require('../assets/lilly/lilly.jpg')} width = '500' alt =\"Lilly\" />\n  <p class=\"card-text mx-auto mt-3\"><b>Lilly is a Labrador.</b></p>\n  <p class=\"card-text mx-auto mt-3\"><b>She will grow to: </b>between 55 - 60cm in height, and 25 - 32kg in weight.</p>\n  <p class=\"card-text mx-auto mt-3\"><b>She is: </b>Intelligent, Kind, Trusting and Outgoing.</p>\n  <p class=\"card-text mx-auto mt-3\"><b>Her job is: </b>Fishing!! Labradors help catch fish on fishing boats.</p>\n\n</div>\n</div>\n  )\n};\nexport default Lilly\n","import React, { Component } from 'react';\nimport DogFact from './components/dogFact.js';\nimport DogGif from './components/dogGif.js';\nimport Navbar from './components/navBar.js';\nimport DogHist from'./components/dogHist.js';\nimport NoDogFact from './components/noFacts.js';\nimport Lilly from './components/lilly.js';\n\n\nlet dogData ='';\nclass App extends Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n        fact: [],\n        imgData: [],\n        dogGif:'',\n        dogImg:'',\n        breed: '',\n        height:'',\n        weight:'',\n        temper:'',\n        job:'',\n        isLoaded:''\n    };\n  }\n\n  componentDidMount(){\n\n    //fist call gets an image from api1\n  fetch('https://api.thedogapi.com/v1/images/search?mime_types=gif&&api_key=1dd6d46e-d0e8-4b4c-a651-a8cc707742f2') // use a header for the api keey value pair\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ imgData: data })\n      this.setState({ dogGif: this.state.imgData[0].url }) // Extract out dog imageUrl and pass as prop to dog componenbt\n      //console.log('Here is the dog image: ' + this.state.dog);\n    })\n    .catch(console.log)\n  // second call gets an image from api 2\n  fetch('https://api.thedogapi.com/v1/images/search?api_key=1dd6d46e-d0e8-4b4c-a651-a8cc707742f2')\n    .then(res2 => res2.json())\n    .then((data) => {\n      this.setState({ fact: data })\n      this.setState({ dogImg: this.state.fact[0][\"url\"] })\n      this.setState({ breed: this.state.fact[0].breeds[0][\"name\"] })\n      this.setState({ height: this.state.fact[0].breeds[0][\"height\"].metric })\n      this.setState({ weight: this.state.fact[0].breeds[0][\"weight\"].metric })\n      this.setState({ temper: this.state.fact[0].breeds[0][\"temperament\"] })\n      this.setState({ job: this.state.fact[0].breeds[0][\"bred_for\"] })\n\n     })\n     .catch(console.log)\n  }\n\n  render () {\n    //console.log('The length value of height: ' + this.state.breed.length);\n    let dogOut;\n\n    if(this.state.breed.length < 1) {  // If breed is empty\n    dogOut = <NoDogFact dogImg={this.state.dogImg} />;\n  } else {\n    dogOut = <DogFact\n      fact={this.state.fact}\n      breed={this.state.breed}\n      height={this.state.height}\n      weight={this.state.weight}\n      temper={this.state.temper}\n      job={this.state.job}\n      dogImg ={this.state.dogImg}\n      />\n  }\n\n// Return divides the page into columns and there is some conditional rendering to handle video. // Will replace with a component\n// Conditional rendering to deal with images that have no information\n    return (\n      <div class=\"container-fluid\">\n      {<Navbar />}\n      <div class=\"row\">\n        <div class=\"col-sm mb-3\">\n\n      {dogOut}\n      {<DogHist />}\n\n        </div>\n\n        <div class=\"col-sm mb-3\">\n         {<DogGif\n           imgData={this.state.imgData}\n           dogGif={this.state.dogGif}\n           />}\n           {<Lilly />}\n        </div>\n      </div>\n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}